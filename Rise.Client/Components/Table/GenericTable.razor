@using Microsoft.IdentityModel.Tokens
@inject Microsoft.Extensions.Localization.IStringLocalizer<GenericTable> Localizer


   <section class="pt-5 mt-5 align-items-start">
     <div class="container table-container">
       <div class="row justify-content-center">
           <div class="col-12">
               <div class="card">
                   @if (IsLoading)
                   {
                       <div class="loading-container" style="background-color: transparent;">
                           <div class="spinner-border text-primary" role="status">
                               <span class="visually-hidden">@Localizer["Loading"]</span>
                           </div>
                       </div>
                   } else if (Data.IsNullOrEmpty())
                   {
                               <div class="card-body d-flex gap-3 align-content-center justify-content-center">
                                   <i class="ni ni-world-2"></i>
                                   <p class="card-text text-muted text-center">@NoDataDisplay</p>
                               </div>
                   }
                   else
                   {
                       <div class="table-responsive">
                           <table class="table align-items-center mb-0">
                               <thead>
                               <tr>
                                   @foreach (var header in Headers)
                                   {
                                       <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2 @header.CssClass">@header.Title</th>
                                   }
                               </tr>
                               </thead>
                               <tbody>
                               @foreach (var row in paginatedData)
                               {
                                   <tr>
                                       @foreach (var column in row)
                                       {
                                           @column
                                       }
                                   </tr>
                               }

                               </tbody>
                               @if (totalPages > 1)
                               {
                                   <tfoot>
                                   <div class="d-flex justify-content-between align-items-center mt-5 ml-2">
                                       <button type="button" class="btn btn-outline-secondary" style="width: 112px;" @onclick="PreviousPage" disabled="@((currentPage == 1))">@Localizer["Previous"]</button>
                                       <span class="text-muted">@Localizer["Page"] @currentPage @Localizer["Of"] @totalPages</span>
                                       <button type="button" class="btn btn-outline-secondary" style="width: 112px;" @onclick="NextPage" disabled="@((currentPage == totalPages))">@Localizer["Next"]</button>
                                   </div>
                                   </tfoot>
                               }
                           </table>
                           
                       </div>
                   } 
                   @FormContent
               </div>
           </div>
       </div>
     </div>
   </section>
   
 
@code {
    [Parameter] public List<TableHeader> Headers { get; set; } = new();
    [Parameter] public List<List<RenderFragment>>? Data { get; set; } = new();
    [Parameter] public string NoDataDisplay { get; set; } = string.Empty;
    [Parameter] public bool IsLoading { get; set; } = false;
    [Parameter] public RenderFragment? FormContent { get; set; }

    
    private List<List<RenderFragment>> paginatedData = new();
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => (int)Math.Ceiling((double)Data.Count() / pageSize);
    
    

    protected override void OnParametersSet()
    {
            LoadPage();
    }
   
    private void LoadPage()
    {
        paginatedData = Data
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }
    
    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            LoadPage();
        }
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            LoadPage();
        }
    }
    
}