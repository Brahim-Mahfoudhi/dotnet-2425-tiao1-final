@typeparam TView
@typeparam TNew
@typeparam TUpdate

@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using Microsoft.Extensions.Localization
@using Rise.Client.Components.Table

<div class="text-white">
    <h1>@Localizer["Title"]</h1>

    <GenericTable Headers="Headers" Data="Data(_items ?? Array.Empty<TView>())" NoDataDisplay="@Localizer["NoItems"]"
        IsLoading="_items == null">

        <FormContent>
            @if (formIsShown)
            {
                <EditForm EditContext="editContext" OnSubmit="Confirm">
                    <DataAnnotationsValidator />
                    <div class="mt-2 d-flex align-items-center gap-1">
                        <div class="col-auto">
                            <InputText class="form-control mb-2" @bind-Value="equipmentModel.Name"
                                placeholder="Enter Name" />
                        </div>
                        <div class="col-auto">
                            <button type="submit" id="submit-button"
                                class="btn bg-gradient-primary mb-2">@Localizer["Submit"]</button>
                            <button type="button" id="cancel-button" class="btn bg-gradient-dark mb-2"
                                @onclick="Cancel">@Localizer["Cancel"]</button>
                        </div>
                    </div>
                    <ValidationMessage For="() => equipmentModel.Name" />
                </EditForm>
            }
            else
            {
                <button id="show-form-button" class="btn bg-gradient-primary m-4" @onclick="Add">@Localizer["Add"]</button>
            }
        </FormContent>
    </GenericTable>
</div>

@code {
    [Inject] private IDialogService DialogService { get; set; }
    [Parameter] public required string Title { get; set; }
    [Parameter] public required string NameHeader { get; set; }
    [Parameter] public required string CountHeader { get; set; }
    [Parameter] public required string CommentsHeader { get; set; }
    [Parameter] public required Func<TView, string> GetId { get; set; }
    [Parameter] public required Func<TView, string> GetName { get; set; }
    [Parameter] public required Func<TView, int> GetCount { get; set; }
    [Parameter] public required Func<TView, List<string>> GetComments { get; set; }
    [Parameter] public required IEquipmentService<TView, TNew, TUpdate> Service { get; set; }
    [Parameter] public required IStringLocalizer Localizer { get; set; }

    private bool formIsShown = false;
    private EquipmentModel equipmentModel = new();
    private IEnumerable<TView>? _items;
    private EditContext editContext;
    private ValidationMessageStore validationMessageStore;
    private Func<string, Task>? confirmAction;
    private string? equipmentId;

    public class EquipmentModel
    {
        [Required(ErrorMessage = "Name is required.")]
        public string Name { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        _items = await Service.GetAllAsync();
        editContext = new EditContext(equipmentModel);
        validationMessageStore = new ValidationMessageStore(editContext);
    }

    private void Add()
    {
        confirmAction = async (value) => await CreateNewItem(value); ;
        equipmentModel.Name = string.Empty;
        formIsShown = true;
    }

    private List<TableHeader> Headers => new List<TableHeader>
{
new (Localizer["Name"]),
new (Localizer["CountBookings"]),
new (Localizer["Comments"]),
};

    private List<List<RenderFragment>> Data(IEnumerable<TView>? items)
    {
        var rows = new List<List<RenderFragment>>();

        if (items == null)
            return rows;

        foreach (var item in items)
        {
            var row = new List<RenderFragment>
{
TableCellService.DefaultTableCell(GetName(item)),
TableCellService.DefaultTableCell(GetCount(item).ToString()),
TableCellService.DefaultTableCell(GetComments(item) != null ? string.Join(", ", GetComments(item)) : ""),
TableCellService.ActionCell(GetId(item), this, Edit, Delete)
};

            rows.Add(row);
        }

        return rows;
    }

    private async Task Confirm()
    {
        ClearValidationMessages();

        if (!editContext.Validate())
        {
            return;
        }

        if (confirmAction == null)
        {
            AddValidationError(nameof(equipmentModel.Name), "No action specified for confirmation.");
            return;
        }

        try
        {
            await confirmAction(equipmentModel.Name);
            _items = await Service.GetAllAsync(); // Ververs de lijst
            formIsShown = false; // Verberg het formulier
        }
        catch (Exception e)
        {
            AddValidationError(nameof(equipmentModel.Name), e.Message);
        }
    }

    private async Task Edit(string id)
    {
        var itemToUpdate = _items.FirstOrDefault(item => GetId(item) == id);

        if (itemToUpdate == null)
        {
            return;
        }

        equipmentId = id;
        equipmentModel.Name = GetName(itemToUpdate);
        confirmAction = async (_) => await UpdateItem(equipmentId);
        formIsShown = true;
    }

    private async Task Delete(string id)
    {
        var result = await DialogService.ShowMessageBox(
        null,
        Localizer["Delete"],
        "OK",
        Localizer["Cancel"]
        );

        if (result == true)
            await DeleteItem(id);
    }

    private async Task CreateNewItem(string name)
    {
        var newItem = (TNew)Activator.CreateInstance(typeof(TNew))!;
        var nameProperty = typeof(TNew).GetProperty("name");
        if (nameProperty != null && nameProperty.CanWrite)
        {
            nameProperty.SetValue(newItem, name);
        }

        await Service.CreateAsync(newItem);
    }

    private async Task UpdateItem(string id)
    {
        var updatedItem = (TUpdate)Activator.CreateInstance(typeof(TUpdate))!;

        var idProperty = typeof(TUpdate).GetProperty("id");
        if (idProperty != null && idProperty.CanWrite)
        {
            idProperty.SetValue(updatedItem, id);
        }

        var nameProperty = typeof(TUpdate).GetProperty("name");
        if (nameProperty != null && nameProperty.CanWrite)
        {
            nameProperty.SetValue(updatedItem, equipmentModel.Name);
        }

        await Service.UpdateAsync(updatedItem);
    }

    private async Task DeleteItem(string id)
    {
        await Service.DeleteAsync(id);
        _items = await Service.GetAllAsync();
    }

    private void Cancel()
    {
        ClearValidationMessages();
        equipmentModel.Name = string.Empty;
        formIsShown = false;
    }

    private void AddValidationError(string field, string errorMessage)
    {
        var fieldIdentifier = new FieldIdentifier(equipmentModel, field);
        validationMessageStore.Add(fieldIdentifier, errorMessage);
        editContext.NotifyValidationStateChanged();
    }

    private void ClearValidationMessages()
    {
        validationMessageStore.Clear();
        editContext.NotifyValidationStateChanged();
    }
}
