@page "/messaging"
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components
@using Rise.Shared.Notifications
@using Rise.Shared.Enums
@attribute [Authorize(Roles = "Admin")]
@inject IStringLocalizer<AdminMesseging> Localizer
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject INotificationService NotificationService

<PageTitle>@Localizer["AdminMesseging"]</PageTitle>

<div class="container mt-5">

    <h2>@Localizer["Title"]</h2>

    <EditForm EditContext="@editContext" OnValidSubmit="ShowConfirmationPopup">
        <DataAnnotationsValidator />
        <div>
            @Localizer["FieldsRequired"]
        </div>

        <div class="inputWrapper">
            <label  class="lable">@Localizer["Title_EN"]</label>
            <input class="form-input form-control mt-0" type="text" @bind="notification.Title_EN" required/>
        </div>
        <div class="inputWrapper">
            <label  class="lable">@Localizer["Title_NL"]</label>
            <input class="form-input form-control mt-0" type="text" @bind="notification.Title_NL" required/>
        </div>
        <div class="inputWrapper">
            <label  class="lable">@Localizer["Message_EN"]</label>
            <textarea class="form-input form-control mt-0" @bind="notification.Message_EN" required></textarea>
        </div>
        <div class="inputWrapper">
            <label  class="lable">@Localizer["Message_NL"]</label>
            <textarea class="form-input form-control mt-0" @bind="notification.Message_NL" required></textarea>
        </div>
        <div>
            <label>@Localizer["Role"]</label>
            <InputRadioGroup @bind-Value="selectedRole">
                <div>
                    <InputRadio Value="RolesEnum.Admin" id="adminRadio" />
                    <label for="adminRadio">@Localizer["radio-admin"]</label>
                </div>
                <div>
                    <InputRadio Value="RolesEnum.User" id="userRadio" />
                    <label for="userRadio">@Localizer["radio-user"]</label>
                </div>
                <div>
                    <InputRadio Value="RolesEnum.BUUTAgent" id="agentRadio" />
                    <label for="agentRadio">@Localizer["radio-agent"]</label>
                </div>
            </InputRadioGroup>
        </div>
        <div>
            <label>
                <input type="checkbox" @bind="sendAsEmail" /> @Localizer["Send as Email"]
            </label>
        </div>

        <button type="submit" class="btn bg-gradient-primary mt-4 mb-0 menu-btn-item" disabled="@(editContext.Validate() ? false : true)">@Localizer["Send Notification"]</button>
    </EditForm>
</div>

@if (showConfirmationPopup)
{
    <div class="modal show" tabindex="-1" style="display: block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@Localizer["Confirmation"]</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="HideConfirmationPopup"></button>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideConfirmationPopup">@Localizer["Cancel"]</button>
                    <button type="button" class="btn btn-primary" @onclick="HandleValidSubmit">@Localizer["Send"]</button>
                </div>
            </div>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success mt-3">@successMessage</div>
}


@code {
    private string? userIdAuth0;
    private NotificationDto.NewNotification notification = new NotificationDto.NewNotification();
    private RolesEnum selectedRole = RolesEnum.User;
    private bool sendAsEmail = false;
    private EditContext editContext;
    private bool showConfirmationPopup = false;
    private string? successMessage;

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(notification);
        editContext.OnFieldChanged += HandleFieldChanged;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userIdAuth0 = user.FindFirst(c => c.Type == "sub")?.Value;
    }

    private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        StateHasChanged();
    }

    private void ShowConfirmationPopup()
    {
        showConfirmationPopup = true;
    }

        private void HideConfirmationPopup()
    {
        showConfirmationPopup = false;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await NotificationService.CreateAndSendNotificationToUsersByRoleAsync(notification, selectedRole, "en", sendAsEmail);
            successMessage = Localizer["MessageSent"];
            ResetForm();
        }
        catch (Exception ex)
        {
            // Handle error (e.g., show an error message)
        }
        finally
        {
            showConfirmationPopup = false;
        }
    }

    private void ResetForm()
    {
        notification = new NotificationDto.NewNotification();
        selectedRole = RolesEnum.User;
        sendAsEmail = false;
        editContext = new EditContext(notification);
        editContext.OnFieldChanged += HandleFieldChanged;
    }
}