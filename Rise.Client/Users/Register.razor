@page "/register"
@using Microsoft.Extensions.Localization
@using Rise.Shared.Enums
@using Rise.Shared.Users
@inject NavigationManager NavigationManager;
@inject IUserService UserService;
@inject IStringLocalizer<Register> Localizer;
@inject IJSRuntime Js;

        <div class="col-md-3 mt-5 ml-auto mr-auto content-height">
            <div class="d-flex flex-column justify-content-around gap-5">
                <div>
                    <RegistrationInfo Title="@Localizer["Age"]" Description="@Localizer["AgeInfo"]"/>
                    <RegistrationInfo Title="@Localizer["Location"]" Description="@Localizer["LocationInfo"]"/>
                    <RegistrationInfo Title="@Localizer["Deposit"]" Description="@Localizer["DepositInfo"]"/>
                    <RegistrationInfo Title="@Localizer["Training"]" Description="@Localizer["TrainingInfo"]"/>
                </div>

                <div
                    class="shadow border-radius-lg d-flex flex-column align-items-start justify-content-around gap-3">
                    <ContactInfo IconClass="ni ni-pin-3" Text="Terneuzenlaan 55, 9000 Gent"/>
                    <ContactInfo IconClass="ni ni-headphones" Text="(+32) 9 123 45 67"/>
                    <ContactInfo IconClass="ni ni-single-02" Text="buut.deelbootjes@gmail.com" IsMail="true"/>
                </div>

            </div>
            <div class="ml-auto mr-auto">


            </div>
        </div>
        <div class="col-md-8 mr-auto">
            <div class="card card-plain">

                <div class="card-header pb-0 d-flex flex-column align-items-start justify-content-start">
                    <h3 class="text-white ">@Localizer["Register"]</h3>
                    <p class="description mb-0">@Localizer["RegisterInfo"]</p>
                </div>


                <div class="card-body">

            @if (_isLoading)
            {
                                    <!-- Show loading spinner when registration is in progress -->
                                    <div class="form-card">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
            }

            else if (_userCreated == true)
            {
                                    <!-- Display success message and user details when registration is successful -->
                                    <div class="form-card">
                            <h2>@Localizer["ThankForRegistering"]</h2>
                            <p>@_statusMessage</p>
                            <p>@Localizer["AdminValidationText"]</p>
                        </div>
            }
            else
            {
                                    <!-- Show EditForm and error message if registration fails or has not been attempted -->
                @if (_userCreated == false)
                {
                                                    <h2>@Localizer["RegistrationFailed"]</h2>
                                                    <p>@_statusMessage</p>
                }

                                    <EditForm EditContext="_editContext" OnValidSubmit="Submit">
                                        <CustomDataAnnotationsValidator EditContext="_editContext"/>
                                        <div class="d-flex align-items-start justify-content-around">
                                            <div class="col-5">
                                                <div class="input-form-spacing">
                                                    <label for="FirstName">@Localizer["FirstName"]</label>
                                                    <InputText class="form-control" id="FirstName" autocomplete="given-name"
                                                               @bind-Value="tempUser.FirstName"
                                                               placeholder="@Localizer["FirstName"]"/>
                                @if (showValidationErrors)
                                {
                                                                    <ValidationMessage For="@(() => tempUser.FirstName)"/>
                                }
                                                </div>
                                                <div class="input-form-spacing">
                                                    <label class="form-label" for="Email">@Localizer["Email"]: </label>
                                                    <InputText class="form-input form-control mt-0" type="email" id="Email"
                                                    autocomplete="email"
                                                               @bind-Value="tempUser.Email" placeholder="@Localizer["Email"]"
                                                               @oninput="OnEmailInput"/>
                                @if (showValidationErrors)
                                {
                                                                    <ValidationMessage For="@(() => tempUser.Email)"/>
                                }
                                @if (isEmailTaken)
                                {
                                                                    <p style="color: #FF0100; font-size: 0.875rem; margin:0;">
                                        @Localizer["EmailAlreadyTaken"]</p>
                                }
                                                </div>
                                                <div class="input-form-spacing">
                                                    <label class="form-label" for="BirthDate">@Localizer["BirthDate"]:
                                                    </label>
                                                    <InputDate class="form-input form-control mt-0" style="height: 38px;"
                                                               id="BirthDate" autocomplete="bday" @bind-Value="tempUser.BirthDate"/>
                                @if (showValidationErrors)
                                {
                                                                    <ValidationMessage For="@(() => tempUser.BirthDate)"/>
                                }
                                                </div>
                                             <div class="input-form-spacing">
                <label class="form-label" for="Password">@Localizer["Password"]:</label>
                <InputText class="form-input form-control mt-0" type="password"
                           id="Password" autocomplete="new-password" @bind-Value="tempUser.Password"
                           placeholder="@Localizer["Password"]" />
                                @if (showValidationErrors)
                                {
                                <ValidationMessage For="@(() => tempUser.Password)" />
                                }
            </div>

            <div class="input-form-spacing">
                <label class="form-label" for="ConfirmPassword">@Localizer["ConfirmPassword"]:</label>
                <InputText class="form-input form-control mt-0" type="password"
                           id="ConfirmPassword" autocomplete="new-password" @bind-Value="tempUser.ConfirmPassword"
                           placeholder="@Localizer["ConfirmPassword"]" />
                                @if (showValidationErrors)
                                {
                                <ValidationMessage For="@(() => tempUser.ConfirmPassword)" />
                                }
            </div>

                                            </div>

                                            <div class="col-5">
                                                <div class="input-form-spacing">
                                                    <label class="form-label" for="LastName">@Localizer["LastName"]:
                                                    </label>
                                                    <InputText class="form-input form-control mt-0" id="LastName" autocomplete="family-name"
                                                               @bind-Value="tempUser.LastName"
                                                               placeholder="@Localizer["LastName"]"/>
                                @if (showValidationErrors)
                                {
                                                                    <ValidationMessage For="@(() => tempUser.LastName)"/>
                                }
                                                </div>
                                                <div class="input-form-spacing">
                                                    <label class="form-label" for="PhoneNumber">@Localizer["PhoneNumber"]:
                                                    </label>
                                                    <InputText class="form-input form-control mt-0" type="tel"
                                                               id="PhoneNumber" autocomplete="tel" @bind-Value="tempUser.PhoneNumber"
                                                               placeholder="@Localizer["PhoneNumber"]"/>
                                @if (showValidationErrors)
                                {
                                                                    <ValidationMessage For="@(() => tempUser.PhoneNumber)"/>
                                }
                                                </div>
                                                <div class="input-form-spacing position-relative">
                                                    <label class="form-label"
                                                           for="Street">@Localizer["SelectAddress"]:</label>
                                                    <InputText id="Street" class="form-input form-control mt-0"
                                                               @bind-Value="searchQuery" @oninput="OnSearchQueryChanged"
                                                               placeholder="@Localizer["TypeStreet"]"/>

                                                    <!-- Display filtered street suggestions -->
                                @if (filteredStreets.Any())
                                {
                                                                    <ul class="list-group mt-1 street-list">
                                        @foreach (var street in filteredStreets)
                                        {
                                                                                        <li class="list-group-item" style="cursor: pointer;"
                                                                                            @onclick="() => SelectStreet(street)">
                                                @street
                                                                                        </li>
                                        }
                                                                    </ul>
                                }
                                @if (showValidationErrors)
                                {
                                                                    <ValidationMessage For="@(() => tempUser.Street)"/>
                                }
                                                </div>
                                                <div class="d-flex flex-row gap-4 input-form-spacing">
                                                    <div class="d-flex flex-column">
                                                        <div>
                                                            <label class="form-label-small"
                                                                   for="Address.HouseNumber">@Localizer["HouseNumber"]:
                                                            </label>
                                                            <InputText class="form-input-small form-control mt-0"
                                                                       id="HouseNumber" @bind-Value="tempUser.HouseNumber"
                                                                       placeholder="@Localizer["Nr"]"/>
                                                        </div>
                                    @if (showValidationErrors)
                                    {
                                                                        <ValidationMessage For="@(() => tempUser.HouseNumber)"
                                                                                           style="white-space: nowrap;"/>
                                    }
                                                    </div>
                                                    <div>
                                                        <label class="form-label-small" for="Address.Bus">@Localizer["Bus"]:
                                                        </label>
                                                        <InputText class="form-input-small form-control mt-0" id="Bus"
                                                                   @bind-Value="tempUser.Bus" placeholder="@Localizer["Bus"]"/>
                                    @if (showValidationErrors)
                                    {
                                                                        <ValidationMessage For="@(() => tempUser.Bus)"/>
                                    }
                                                    </div>
                                                </div>
                                                <div
                                                    class="d-flex align-items-center gap-4 form-check form-check-info text-left text-5xl input-form-spacing">
                                                    <input class="form-check-input" type="checkbox" value=""
                                                           id="flexCheckDefault" @onchange="OnCheckboxChanged">
                                                    <label class="form-check-label text-xl my-auto" for="flexCheckDefault">
                                    @Localizer["IAgreeThe"]
                                                        <a
                                                            href="https://www.buut.be/_files/ugd/617ca3_a416710b66824442a0f1d87137086b9a.pdf"
                                                            class="text-white-50 font-weight-bold text-decoration-underline-hover">@Localizer["TermsAndConditions"]</a>
                                                    </label>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="d-flex flex-column gap-3 pt-5">
                                            <div class="d-flex flex-row justify-content-around gap-3">
                                                <button class="btn bg-gradient-primary w-50 mt-4 mb-0"
                                                        disabled="@(isTermsAccepted && !isEmailTaken ? false : true)"
                                                        type="submit">@Localizer["Register"]</button>
                                                <button class="btn bg-gradient-dark w-50 mt-4 mb-0" type="button"
                                                        @onclick="Cancel">@Localizer["Cancel"]</button>
                                            </div>
                                            <span
                                                class="text-white d-flex align-items-start justify-content-start">@Localizer["AlreadyAnAccount"]
                                                <a class="info-title pl-2 text-decoration-underline"
                                                   href="/embedded-login"> @Localizer["Login"]</a></span>
                                        </div>
                                    </EditForm>
            }
                </div>
            </div>
        </div>




@code {
    private string searchQuery = string.Empty;
    private List<string> filteredStreets = new();

    private UserDto.TempRegisterUser tempUser = new();
    private bool? _userCreated = null;
    private bool _isSubmitted = false;
    private bool _isLoading = false;
    private string? _statusMessage;
    private UserDto.RegistrationUser? _newUser;
    private bool showValidationErrors = false;
    private bool isTermsAccepted = false;
    private string email = string.Empty;
    private bool isEmailTaken = false;
    private CancellationTokenSource? debounceCts;
    private EditContext _editContext;

    protected override void OnInitialized()
    {
        _editContext = new EditContext(tempUser);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
{
    if (firstRender)
    {
        try
        {
            await Js.InvokeVoidAsync("addAutofillEvent", "FirstName", DotNetObjectReference.Create(this));
            await Js.InvokeVoidAsync("addAutofillEvent", "LastName", DotNetObjectReference.Create(this));
            await Js.InvokeVoidAsync("addAutofillEvent", "Email", DotNetObjectReference.Create(this));
            await Js.InvokeVoidAsync("addAutofillEvent", "PhoneNumber", DotNetObjectReference.Create(this));
            await Js.InvokeVoidAsync("addAutofillEvent", "BirthDate", DotNetObjectReference.Create(this));

            await Js.InvokeVoidAsync("promptAutofill");
        }
        catch (JSException ex)
        {
            Console.WriteLine($"JSInterop error: {ex.Message}"); // Optional: Log the error for debugging
        }
    }
}


    [JSInvokable]
    public void UpdateValue(string inputId, string value)
    {
        // Update the appropriate property of tempUser based on the inputId
        switch (inputId)
        {
            case "FirstName":
                tempUser.FirstName = value;
                break;
            case "LastName":
                tempUser.LastName = value;
                break;
            case "Email":
                tempUser.Email = value;
                break;
            case "PhoneNumber":
                tempUser.PhoneNumber = value;
                break;
                // Add more cases for other input fields
        }

        StateHasChanged(); // Notify Blazor to re-render the UI
    }


    private async Task OnEmailInput(ChangeEventArgs e)
    {
        email = e.Value?.ToString() ?? string.Empty;

        // Cancel any previous debounce operation
        debounceCts?.Cancel();

        // Set up a new CancellationTokenSource for this debounce
        debounceCts = new CancellationTokenSource();

        try
        {
            // Introduce a 500ms delay before calling the API
            await Task.Delay(500, debounceCts.Token);

            // Call the backend API to check email availability
            isEmailTaken = await CheckEmailExistsAsync(email);
        }
        catch (TaskCanceledException)
        {
            // Task was canceled due to rapid user input
        }
    }

    private async Task<bool> CheckEmailExistsAsync(string email)
    {
        return await UserService.IsEmailTakenAsync(email);
    }

    private void OnCheckboxChanged(ChangeEventArgs e)
    {
        isTermsAccepted = (bool?)e.Value ?? false;
        showValidationErrors = true;
    }

    private async Task Submit()
    {
        if (!_editContext.Validate()) return;

        @* if (tempUser.Street == null && tempUser.HouseNumber == null) return; *@

        _isLoading = true;
        _newUser = new UserDto.RegistrationUser(tempUser.FirstName, tempUser.LastName, tempUser.Email, tempUser.PhoneNumber,
        tempUser.Password, null, new AddressDto.CreateAddress((StreetEnum)tempUser.Street, tempUser.HouseNumber, tempUser.Bus),
        tempUser.BirthDate);
        _isSubmitted = true;

        var result = await UserService.CreateUserAsync(_newUser);
        _userCreated = result.Success;
        _statusMessage = result.Success
        ? Localizer["UserCreatedSuccess"]
        : Localizer[result.Message ?? "UnexpectedErrorOccurred"];

        _isLoading = false;
    }

    private void Cancel() => NavigationManager.NavigateTo("/");


    // Called when user types in the input field
    private void OnSearchQueryChanged(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? string.Empty;
        FilterStreets();
    }

    // Filter street names based on search query
    private void FilterStreets()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredStreets.Clear();
            return;
        }

        filteredStreets = Enum.GetValues(typeof(StreetEnum))
        .Cast<StreetEnum>()
        .Select(street => street.GetStreetName())
        .Where(name => name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
        .ToList();
    }

    // When a street is selected from suggestions
    private void SelectStreet(string streetName)
    {
        searchQuery = streetName; // Set input field to selected street name
        filteredStreets.Clear(); // Clear suggestions

        // Use the enhanced GetStreetEnum method to retrieve the enum value based on the street name
        try
        {
            tempUser.Street = StreetEnumExtensions.GetStreetEnum(streetName);
        }
        catch (ArgumentException ex)
        {
            Console.WriteLine(ex.Message); // Optionally log the error
        }
    }
}